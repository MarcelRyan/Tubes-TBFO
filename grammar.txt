Terminals:
( ) { } [ ] , + - * / % = < > ! " ' ; null true false function if else var let const return do while for break continue try catch finally throw new
Variables:
START_STATE START ALPHABET NUM OTHER COMMENT FIRST MIDCHAR NAME VART VAR CONSTT CONST LETT LET VLC POST_NUM NUMBER FVAR FALSET FALSE TRUET TRUE BOOLEAN STRING_IN STRING_VAL STRING ARRAY_VAL ARRAY RETURNT RETURN BREAKT BREAK FUNCTIONT FUNC_PARAMETER FUNC_NAME FUNC_BLOCK FUNCTION VALUE INCL DECL A_OP C_OP OR_OP L_OP T_OP OP ARITH ARITH_OPERATOR EQUAL_OPERATOR BOOLEAN_OPERATOR TENARY_OPERATOR OPERATORS BLOCK ALLRET_CONDITION ALLBREAKRET_CONDITION BREAK_STATE BC_STATE RETURN_STATE ALL_STATE FUNC_RETURN_STATE FUNC_ALL_STATE FUNC_STATE EXPRESSION EXPRESSION_STATE EXPRESSION_BODY ELSET ELSEIF_CONDITION ELSE IFT IF_CONDITION IF DOT DO LOOP_BC_STATE LOOP_STATE WHILET WHILE_CONDITION WHILE_BLOCK WHILE_HEADER WHILE FORT FOR_EXPRESSION FOR_BODY FOR_CONDITION FOR_BLOCK FOR NEWT THROWT THROW TRYT TRY_MUST TRY CATCHT CATCH_EXPRESSION CATCH FINALLYT FINALLY CASET DEFAULTT SWITCHT SWITCH_STATE SWITCH_BLOCK SWITCH CONDITIONS
Productions:
START_STATE -> START_STATE START_STATE | START ; | CONDITIONS | COMMENT
START -> OPERATORS | LETT | FUNC_NAME | null
ALPHABET -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
NUM -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
OTHER -> ! | @ | # | $ | % | ^ | & | * | ( | ) | - | = | _ | + | [ | ] | \ | { | } | |
COMMENT -> /* */
FIRST -> ALPHABET | $ | _
MIDCHAR -> MIDCHAR MIDCHAR | NUMBER | FIRST
NAME -> FIRST MIDCHAR | FIRST | - NAME
VART -> var
VAR -> VART NAME
CONSTT -> const
CONST -> CONSTT NAME
LETT -> let
LET -> LETT NAME
VLC -> VAR | CONST | LET
POST_NUM -> POST_NUM POST_NUM | NUM
NUMBER -> - POST_NUM | POST_NUM
FVAR -> VLC | NAME
FALSET -> false
FALSE -> FALSET | null
TRUET -> true
TRUE -> TRUET
BOOLEAN -> TRUE | FALSE | FVAR | NUMBER | FUNCTION | ! BOOLEAN
STRING_IN -> \ "
STRING_VAL -> STRING_VAL STRING_VAL | ALPHABET | NUM | OTHER | STRING_IN STRING_VAL STRING_IN
STRING -> STRING STRING | ' STRING_VAL ' | " STRING_VAL " | ' ' | " "
ARRAY_VAL -> ARRAY_VAL , ARRAY_VAL | VALUE
ARRAY -> [ ARRAY_VAL ]
RETURNT -> return
RETURN -> RETURNT VALUE ; | RETURNT ;
BREAKT -> break
BREAK -> BREAKT ;
CONTINUET -> continue
CONTINUE -> CONTINUET ;
FUNCTIONT -> function
FUNC_PARAMETER -> FUNC_PARAMETER , FUNC_PARAMETER | NAME
FUNC_NAME -> NAME ( FUNC_PARAMETER ) | NAME ( )
FUNC_BLOCK -> { FUNC_STATE } | BLOCK
FUNCTION -> FUNCTIONT FUNC_NAME FUNC_BLOCK
VALUE -> NUMBER | FVAR | BOOLEAN_OPERATOR | STRING | ARRAY | FUNC_NAME | null
INCL -> NAME + + | + + NAME
DECL -> NAME - - | - - NAME
A_OP -> + | - | % | / | * | * *
C_OP -> = = | = = = | ! = | ! = = | > | < | > = | < = | ?
OR_OP -> |
L_OP -> & & | OR_OP OR_OP | !
T_OP -> ?
OP -> A_OP | C_OP | OR_OP | L_OP | T_OP
ARITH -> ARITH A_OP ARITH | VALUE
ARITH_OPERATOR -> FVAR A_OP ARITH
EQUAL_OPERATOR -> FVAR = ARITH_OPERATOR | VALUE = ARITH_OPERATOR| FVAR | VALUE
BOOLEAN_OPERATOR -> BOOLEAN_OPERATOR C_OP BOOLEAN_OPERATOR | BOOLEAN | VALUE
TENARY_OPERATOR -> BOOLEAN T_OP VALUE : VALUE
OPERATORS -> ARITH_OPERATOR | EQUAL_OPERATOR | BOOLEAN_OPERATOR | TENARY OPERATOR | INCL | DECL
BLOCK -> { START_STATE }
ALLRET_CONDITION -> IF_CONDITION | ELSEIF_CONDITION | ELSET
ALLBREAKRET_CONDITION -> WHILE_CONDITION | FOR_CONDITION
BREAK_STATE -> START_STATE | BREAK
BC_STATE -> START_STATE | BREAK | CONTINUE
RETURN_STATE -> START_STATE | RETURN
ALL_STATE -> BC_STATE | RETURN
FUNC_RETURN_STATE -> FUNC_RETURN_STATE FUNC_RETURN_STATE | RETURN_STATE | ALLRET_CONDITION { FUNC_RETURN_STATE } | ALLBREAKRET_CONDITION { FUNC_ALL_STATE }
FUNC_ALL_STATE -> FUNC_ALL_STATE FUNC_ALL_STATE | ALL_STATE | ALLBREAKRET_CONDITION { FUNC_ALL_STATE } | ALLRET_CONDITION { FUNC_ALL_STATE }
FUNC_STATE -> FUNC_STATE FUNC_STATE | ALLRET_CONDITION { FUNC_RETURN_STATE } | ALLBREAKRET_CONDITION { FUNC_ALL_STATE } | FUNC_RETURN_STATE
EXPRESSION_STATE -> BOOLEAN_OPERATOR | INCL | DECL | EQUAL_OPERATOR
EXPRESSION -> ( EXPRESSION ) | EXPRESSION_STATE
EXPRESSION_BODY -> ( EXPRESSION )
ELSET -> else
ELSEIF_CONDITION -> ELSET IFT EXPRESSION_BODY
ELSE -> ELSEIF_CONDITION BLOCK | ELSET BLOCK | ELSEIF_CONDITION THROW | ELSE THROW
IFT -> if
IF_CONDITION -> IFT EXPRESSION_BODY
IF -> IF_CONDITION BLOCK | ELSEIF_CONDITION BLOCK
DOT -> do
DO -> DOT BLOCK
LOOP_BC_STATE -> LOOP_BC_STATE LOOP_BC_STATE | BC_STATE | ALLRET_CONDITION { LOOP_BC_STATE }
LOOP_STATE -> LOOP_STATE LOOP_STATE | BC_STATE | ALLRET_CONDITION { LOOP_BC_STATE }
WHILET -> while
WHILE_CONDITION -> WHILET EXPRESSION_BODY
WHILE_BLOCK -> { LOOP_STATE } | BLOCK
WHILE_HEADER -> WHILE_CONDITION WHILE_BLOCK
WHILE -> DO WHILE_CONDITION | WHILE_HEADER
FORT -> for
FOR_EXPRESSION -> OPERATORS
FOR_BODY -> ( FOR_EXPRESSION ; FOR_EXPRESSION ; FOR_EXPRESSION )
FOR_CONDITION -> FORT FOR_BODY
FOR_BLOCK -> { LOOP_STATE } | BLOCK
FOR -> FOR_CONDITION FOR_BLOCK
NEWT -> new
THROWT -> throw
THROW -> THROWT VALUE | THROWT NEWT VALUE
TRYT -> try
TRY_MUST -> CATCH | CATCH FINALLY
TRY -> TRYT BLOCK TRY_MUST
CATCHT -> catch
CATCH_EXPRESSION -> CATCHT ( NAME )
CATCH -> CATCH_EXPRESSION BLOCK
FINALLYT -> finally
FINALLY -> FINALLYT BLOCK
CASET -> case
CASE -> CASET :
DEFAULTT -> default
DEFAULT_BODY -> DEFAULTT :
SWITCHT -> switch
SWITCH_STATE -> 
SWITCH_BLOCK -> { SWITCH_STATE }
SWITCH -> SWITCHT EXPRESSION_BODY SWITCH_BLOCK
CONDITIONS -> IF | WHILE | FOR | FUNCTION